================================================================================
                            DOCUMENTAÇÃO COMPLETA - SPYMATE
================================================================================

📱 PROJETO: SpyMate - Plataforma de Acesso e Monitoramento Social
📅 VERSÃO: 2.4.7
🌐 TECNOLOGIAS: React.js, Firebase, Vite, TailwindCSS, Framer Motion
🔧 DESENVOLVIDO EM: JavaScript/JSX

================================================================================
                                 ÍNDICE
================================================================================

1. VISÃO GERAL DO PROJETO
2. ARQUITETURA E TECNOLOGIAS
3. FUNCIONALIDADES PRINCIPAIS
4. ESTRUTURA DE ARQUIVOS
5. CONFIGURAÇÃO DO FIREBASE
6. SISTEMA DE AUTENTICAÇÃO
7. BANCO DE DADOS (FIRESTORE)
8. SISTEMA DE INTERNACIONALIZAÇÃO
9. VALIDAÇÃO DE NÚMEROS TELEFÔNICOS
10. GUIA DE INSTALAÇÃO
11. GUIA DE USO
12. PÁGINAS E COMPONENTES
13. CONFIGURAÇÕES DE SEGURANÇA
14. DEPLOY E PRODUÇÃO

================================================================================
                            1. VISÃO GERAL DO PROJETO
================================================================================

O SpyMate é uma aplicação web moderna desenvolvida em React.js que simula uma 
plataforma de acesso e monitoramento de redes sociais. O projeto apresenta uma 
interface com tema hacker/matrix e oferece funcionalidades de "clonagem" 
simulada para WhatsApp, Instagram e Facebook.

IMPORTANTE: Este é um projeto educacional/demonstrativo. Todas as funcionalidades
são simuladas e não realizam ações reais de monitoramento ou acesso não autorizado.

CARACTERÍSTICAS PRINCIPAIS:
- Interface moderna com tema cyberpunk/hacker
- Sistema completo de autenticação com Firebase
- Suporte a 4 idiomas (Português, Inglês, Espanhol, Francês)
- Validação avançada de números telefônicos internacionais
- Simulação realística de processos de "clonagem"
- Responsive design para desktop e mobile

================================================================================
                           2. ARQUITETURA E TECNOLOGIAS
================================================================================

FRONTEND:
- React.js 18+ (Hooks, Context API)
- Vite (Build tool e desenvolvimento)
- TailwindCSS (Estilização)
- Framer Motion (Animações)
- React Router Dom (Navegação)
- React Hot Toast (Notificações)
- Lucide React (Ícones)
- React i18next (Internacionalização)

BACKEND:
- Firebase Authentication (Autenticação)
- Cloud Firestore (Banco de dados NoSQL)
- Firebase Hosting (Deploy opcional)

ESTRUTURA DE DADOS:
- Coleção: userProfiles
- Documentos indexados por UID do usuário
- Validação de dados em tempo real

================================================================================
                           3. FUNCIONALIDADES PRINCIPAIS
================================================================================

🔐 AUTENTICAÇÃO:
- Registro de usuários com email/senha
- Login seguro com validação
- Logout com limpeza de sessão
- Proteção de rotas privadas
- Validação de idade (18+)

📱 CLONAGEM WHATSAPP:
- Coleta segura de dados do usuário
- Validação internacional de números telefônicos
- Geração de códigos de acesso
- Integração com WhatsApp (envio de códigos)
- Simulação de processo de clonagem
- Timer de countdown realístico

📸 CLONAGEM INSTAGRAM:
- Input de username do Instagram
- Validação de usernames
- Simulação de análise de perfil
- Interface de mensagens diretas simulada
- Progresso visual de extração de dados

📘 CLONAGEM FACEBOOK:
- Input de URL de perfil do Facebook
- Validação de URLs
- Simulação de análise do Messenger
- Interface de conversas simuladas
- Mapeamento de conexões sociais

🌍 INTERNACIONALIZAÇÃO:
- Português (Brasil)
- Inglês (Internacional)
- Espanhol (España/LATAM)
- Francês (França)
- Troca dinâmica de idiomas
- Persistência da preferência

📞 VALIDAÇÃO TELEFÔNICA:
- Suporte a 7 países pré-definidos:
  * Brasil (+55)
  * Estados Unidos (+1)
  * França (+33)
  * Espanha (+34)
  * Argentina (+54)
  * México (+52)
  * Rússia (+7)
- Código de país manual (qualquer país)
- Validação em tempo real
- Formatação automática
- Geração de WhatsApp ID

================================================================================
                            4. ESTRUTURA DE ARQUIVOS
================================================================================

spymate/
├── public/
│   ├── vite.svg
│   └── index.html
├── src/
│   ├── components/
│   │   ├── CloningProgressModal.jsx
│   │   ├── CloneNumberModal.jsx
│   │   ├── FacebookCloningModal.jsx
│   │   ├── FacebookTargetModal.jsx
│   │   ├── InstagramCloningModal.jsx
│   │   ├── InstagramTargetModal.jsx
│   │   ├── LanguageSelector.jsx
│   │   ├── Navbar.jsx
│   │   ├── PhoneInput.jsx
│   │   └── UserDataModal.jsx
│   ├── contexts/
│   │   └── AuthContext.jsx
│   ├── pages/
│   │   ├── About.jsx
│   │   ├── Contact.jsx
│   │   ├── Home.jsx
│   │   ├── InstagramAccess.jsx
│   │   ├── Login.jsx
│   │   ├── NotFound.jsx
│   │   ├── Register.jsx
│   │   ├── UpdateProfile.jsx
│   │   ├── Welcome.jsx
│   │   └── WhatsAppAccess.jsx
│   ├── utils/
│   │   └── phoneValidation.js
│   ├── config/
│   │   └── firebase.js
│   ├── i18n/
│   │   └── index.js
│   ├── App.jsx
│   ├── main.jsx
│   └── index.css
├── package.json
├── vite.config.js
├── tailwind.config.js
├── postcss.config.js
└── DOCUMENTACAO-SPYMATE.txt

================================================================================
                            5. CONFIGURAÇÃO DO FIREBASE
================================================================================

CONFIGURAÇÃO INICIAL:

1. Criar projeto no Firebase Console (https://console.firebase.google.com)

2. Ativar serviços necessários:
   - Authentication (Email/Password)
   - Cloud Firestore
   - Hosting (opcional)

3. Configurar arquivo src/config/firebase.js:

```javascript
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";

const firebaseConfig = {
  apiKey: "SUA_API_KEY",
  authDomain: "SEU_PROJETO.firebaseapp.com",
  projectId: "SEU_PROJETO_ID",
  storageBucket: "SEU_PROJETO.appspot.com",
  messagingSenderId: "SEU_SENDER_ID",
  appId: "SEU_APP_ID"
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);
export default app;
```

4. Configurar regras do Firestore:

```javascript
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Permitir leitura/escrita apenas para usuários autenticados
    // e apenas seus próprios documentos
    match /userProfiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
```

5. Configurar Authentication:
   - Ativar método Email/Password
   - Configurar domínios autorizados
   - Definir templates de email (opcional)

================================================================================
                           6. SISTEMA DE AUTENTICAÇÃO
================================================================================

FLUXO DE AUTENTICAÇÃO:

1. REGISTRO:
   - Email válido obrigatório
   - Senha mínima de 6 caracteres
   - Confirmação de senha
   - Nome completo
   - Validação em tempo real
   - Criação automática do perfil no Firestore

2. LOGIN:
   - Email e senha
   - Validação de credenciais
   - Redirecionamento automático
   - Persistência de sessão

3. PROTEÇÃO DE ROTAS:
   - Context API para gerenciar estado
   - Rotas protegidas com AuthContext
   - Redirecionamento automático
   - Loading states

IMPLEMENTAÇÃO DO CONTEXT:

```javascript
// AuthContext.jsx
const AuthContext = createContext();

export function useAuth() {
  return useContext(AuthContext);
}

export function AuthProvider({ children }) {
  const [currentUser, setCurrentUser] = useState();
  const [loading, setLoading] = useState(true);

  function signup(email, password, displayName) {
    return createUserWithEmailAndPassword(auth, email, password);
  }

  function login(email, password) {
    return signInWithEmailAndPassword(auth, email, password);
  }

  function logout() {
    return signOut(auth);
  }

  // ... resto da implementação
}
```

================================================================================
                           7. BANCO DE DADOS (FIRESTORE)
================================================================================

ESTRUTURA DE DADOS:

Collection: userProfiles
Document ID: {userUID}
Campos:
- fullName: string (Nome completo)
- isAdult: boolean (Maior de 18 anos)
- whatsappNumber: string (Número formatado)
- notificationEmail: string (Email para notificações)
- createdAt: timestamp (Data de criação)
- updatedAt: timestamp (Última atualização)

EXEMPLO DE DOCUMENTO:

```json
{
  "fullName": "João Silva Santos",
  "isAdult": true,
  "whatsappNumber": "+55 11 99999-8888",
  "notificationEmail": "joao@email.com",
  "createdAt": "2024-01-15T10:30:00Z",
  "updatedAt": "2024-01-20T14:45:00Z"
}
```

OPERAÇÕES IMPLEMENTADAS:

1. CREATE - Criação de perfil após registro
2. READ - Leitura de dados do usuário
3. UPDATE - Atualização de perfil
4. Validação de dados no frontend
5. Sanitização de inputs
6. Tratamento de erros

FUNÇÕES DE DADOS:

```javascript
// Salvar dados do usuário
const saveUserData = async (userData) => {
  try {
    await setDoc(doc(db, "userProfiles", currentUser.uid), {
      ...userData,
      updatedAt: new Date()
    });
  } catch (error) {
    console.error("Erro ao salvar:", error);
  }
};

// Buscar dados do usuário
const fetchUserData = async () => {
  try {
    const userDoc = await getDoc(doc(db, "userProfiles", currentUser.uid));
    return userDoc.exists() ? userDoc.data() : null;
  } catch (error) {
    console.error("Erro ao buscar:", error);
  }
};
```

================================================================================
                        8. SISTEMA DE INTERNACIONALIZAÇÃO
================================================================================

CONFIGURAÇÃO I18N:

Biblioteca: react-i18next
Arquivo: src/i18n/index.js

IDIOMAS SUPORTADOS:
- pt (Português - Brasil) - Padrão
- en (English - International)
- es (Español - España/LATAM)
- fr (Français - France)

ESTRUTURA DE TRADUÇÕES:

```javascript
const resources = {
  pt: {
    translation: {
      // Navegação
      home: "Home",
      about: "Sobre",
      contact: "Contato",
      
      // Autenticação
      login: "Entrar",
      register: "Registrar",
      email: "E-mail",
      
      // ... 300+ strings traduzidas
    }
  },
  en: {
    translation: {
      home: "Home",
      about: "About",
      contact: "Contact",
      // ...
    }
  }
  // ... outros idiomas
};
```

USO NOS COMPONENTES:

```javascript
import { useTranslation } from "react-i18next";

function MyComponent() {
  const { t } = useTranslation();
  
  return (
    <h1>{t("welcome")}</h1>
  );
}
```

TROCA DE IDIOMA:

```javascript
import i18n from "../i18next";

const changeLanguage = (lng) => {
  i18n.changeLanguage(lng);
};
```

CATEGORIAS DE TRADUÇÕES:
- Navegação e Interface
- Autenticação e Registro
- Formulários e Validações
- Mensagens de Erro/Sucesso
- Placeholders e Dicas
- Conteúdo das Páginas
- Mensagens do WhatsApp
- Terminologia Técnica

================================================================================
                        9. VALIDAÇÃO DE NÚMEROS TELEFÔNICOS
================================================================================

ARQUIVO: src/utils/phoneValidation.js

PAÍSES SUPORTADOS:

```javascript
const supportedCountries = [
  {
    code: "BR",
    name: "Brasil",
    flag: "🇧🇷",
    phoneCode: "55",
    format: "+55 11 99999-8888",
    regex: /^55[1-9]{2}9?[0-9]{8}$/,
    minLength: 12,
    maxLength: 13
  },
  {
    code: "US",
    name: "Estados Unidos",
    flag: "🇺🇸",
    phoneCode: "1",
    format: "+1 555 123-4567",
    regex: /^1[2-9][0-9]{2}[2-9][0-9]{6}$/,
    minLength: 11,
    maxLength: 11
  },
  // ... outros países
];
```

FUNCIONALIDADES:

1. **Validação em Tempo Real**:
   - Verifica formato específico por país
   - Regex patterns personalizados
   - Feedback visual imediato

2. **Auto-detecção de País**:
   - Identifica país pelo código
   - Seleção automática no dropdown
   - Formatação automática

3. **Código Manual**:
   - Opção "Outro País"
   - Input para código personalizado (1-4 dígitos)
   - Validação básica para códigos não listados

4. **Formatação**:
   - Display formatting (+XX XXXXX-XXXX)
   - WhatsApp ID generation (XXXXXXXX@c.us)
   - Clean number extraction

5. **Geração de URLs WhatsApp**:

```javascript
const generateWhatsAppURL = (phoneNumber, message) => {
  const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  const cleanNumber = phoneNumber.replace(/\D/g, "");
  const encodedMessage = encodeURIComponent(message);
  
  if (isMobile) {
    return `whatsapp://send?phone=${cleanNumber}&text=${encodedMessage}`;
  } else {
    return `https://web.whatsapp.com/send?phone=${cleanNumber}&text=${encodedMessage}`;
  }
};
```

COMPONENTE PhoneInput:

- Dropdown de países com flags
- Campo de input com validação
- Mensagens de erro/sucesso
- Opção de código manual
- Integração com formulários
- Callback de validação

================================================================================
                             10. GUIA DE INSTALAÇÃO
================================================================================

PRÉ-REQUISITOS:
- Node.js 16+ instalado
- NPM ou Yarn
- Conta no Firebase
- Editor de código (VS Code recomendado)

PASSO A PASSO:

1. **Clonar/Baixar o projeto**:
   ```bash
   git clone [URL_DO_REPOSITORIO]
   cd spymate
   ```

2. **Instalar dependências**:
   ```bash
   npm install
   ```

3. **Configurar Firebase**:
   - Criar projeto no Firebase Console
   - Ativar Authentication e Firestore
   - Copiar configuração para src/config/firebase.js

4. **Configurar variáveis de ambiente** (opcional):
   ```bash
   # .env.local
   VITE_FIREBASE_API_KEY=sua_api_key
   VITE_FIREBASE_AUTH_DOMAIN=seu_dominio
   # ... outras variáveis
   ```

5. **Executar em desenvolvimento**:
   ```bash
   npm run dev
   ```

6. **Acessar aplicação**:
   Abrir http://localhost:5173 no navegador

COMANDOS DISPONÍVEIS:

```bash
npm run dev          # Desenvolvimento
npm run build        # Build para produção
npm run preview      # Preview da build
npm run lint         # Linting do código
```

SOLUÇÃO DE PROBLEMAS:

- **Erro de módulo não encontrado**: npm install
- **Erro do Firebase**: Verificar configuração
- **Porta em uso**: Alterar porta no vite.config.js
- **Build falha**: Verificar ESLint warnings

================================================================================
                               11. GUIA DE USO
================================================================================

FLUXO BÁSICO DO USUÁRIO:

1. **Página Inicial (Welcome)**:
   - Apresentação do SpyMate
   - Botão "INICIAR" para começar
   - Seletor de idioma no canto superior

2. **Registro/Login**:
   - Criar nova conta ou fazer login
   - Validação de email e senha
   - Verificação de idade

3. **Coleta de Dados (Modal)**:
   - Nome completo obrigatório
   - Número WhatsApp com validação internacional
   - Email para notificações
   - Confirmação de maioridade

4. **Dashboard Principal (Home)**:
   - Visualização das 3 plataformas:
     * WhatsApp (FREE)
     * Instagram (PREMIUM)
     * Facebook (BLOQUEADO)
   - Cartões informativos sobre segurança

5. **Acesso WhatsApp**:
   - Exibição dos dados do usuário
   - Geração de código de acesso
   - Envio automático via WhatsApp
   - Input para inserir código
   - Timer de countdown
   - Avisos de segurança

6. **Simulação de Clonagem**:
   - Modal de progresso animado
   - Etapas do processo:
     * Inicializando clonagem
     * Estabelecendo conexão segura
     * Bypassando protocolos
     * Extraindo contatos
     * Clonando mensagens
     * Baixando mídia
     * Finalizando processo

7. **Acesso Instagram** (Premium):
   - Input de username do Instagram
   - Validação de formato (@username)
   - Simulação de análise de perfil
   - Interface de mensagens simuladas

8. **Acesso Facebook** (Bloqueado):
   - Input de URL do perfil
   - Validação de URL do Facebook
   - Processo de análise simulado
   - Interface do Messenger simulada

FUNCIONALIDADES ESPECIAIS:

- **Perfil do Usuário**: Atualização de dados
- **Configurações**: Idioma e preferências
- **Navegação**: Breadcrumbs e botões voltar
- **Responsividade**: Funciona em mobile e desktop
- **Animações**: Transições suaves com Framer Motion
- **Notificações**: Toast messages informativos

================================================================================
                          12. PÁGINAS E COMPONENTES
================================================================================

PÁGINAS PRINCIPAIS:

**Welcome.jsx**:
- Página de entrada do sistema
- Animações de apresentação
- Call-to-action para começar

**Login.jsx / Register.jsx**:
- Formulários de autenticação
- Validação em tempo real
- Links de navegação
- Estados de loading

**Home.jsx**:
- Dashboard principal
- Cards das plataformas
- Informações de segurança
- Navegação para funcionalidades

**WhatsAppAccess.jsx**:
- Coleta e exibição de dados
- Geração de códigos
- Integração WhatsApp
- Timer e alertas

**InstagramAccess.jsx**:
- Input de username
- Simulação de análise
- Interface de mensagens
- Progresso visual

**UpdateProfile.jsx**:
- Formulário de atualização
- Validação de dados
- Integração Firestore

**Contact.jsx**:
- Formulário de contato
- Envio simulado
- Campos obrigatórios

**About.jsx**:
- Informações sobre o projeto
- Toast informativo

**NotFound.jsx**:
- Página de erro 404
- Navegação de retorno
- Design consistente

COMPONENTES REUTILIZÁVEIS:

**Navbar.jsx**:
- Navegação principal
- Logout functionality
- User info display
- Responsive design

**LanguageSelector.jsx**:
- Dropdown de idiomas
- Flags dos países
- Persistência da escolha
- Integração i18n

**PhoneInput.jsx**:
- Input especializado para telefones
- Dropdown de países
- Validação em tempo real
- Opção de código manual
- Feedback visual

**UserDataModal.jsx**:
- Modal de coleta de dados
- Formulário completo
- Validações integradas
- Persistência no Firestore

**CloneNumberModal.jsx**:
- Modal para selecionar número alvo
- Input de WhatsApp target
- Aviso de processo irreversível
- Funcionalidades de segurança

**CloningProgressModal.jsx**:
- Modal de progresso animado
- Etapas do processo
- Informações técnicas
- Sistema de logging

**FacebookTargetModal.jsx**:
- Input de URL do Facebook
- Validação de perfil
- Aviso de tempo de processo
- Funcionalidades de análise

**InstagramTargetModal.jsx**:
- Input de username Instagram
- Validação de formato
- Início de análise
- Feedback de processo

**FacebookCloningModal.jsx**:
- Interface do Messenger simulada
- Conversas falsas
- Contatos simulados
- Mensagens românticas

**InstagramCloningModal.jsx**:
- Interface do Instagram simulada
- Direct Messages fake
- Perfis simulados
- Stories e posts

HOOKS PERSONALIZADOS:

**useAuth** (AuthContext):
- Gerenciamento de autenticação
- Estados de usuário
- Funções de login/logout
- Proteção de rotas

================================================================================
                         13. CONFIGURAÇÕES DE SEGURANÇA
================================================================================

SEGURANÇA DO FIREBASE:

1. **Regras do Firestore**:
```javascript
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /userProfiles/{userId} {
      allow read, write: if request.auth != null 
                        && request.auth.uid == userId
                        && isValidUserData(resource.data);
    }
  }
  
  function isValidUserData(data) {
    return data.keys().hasAll(['fullName', 'isAdult', 'whatsappNumber', 'notificationEmail'])
           && data.fullName is string
           && data.isAdult is bool
           && data.whatsappNumber is string
           && data.notificationEmail is string;
  }
}
```

2. **Regras de Autenticação**:
- Apenas email/senha habilitado
- Verificação de email opcional
- Domínios autorizados configurados
- Rate limiting ativo

VALIDAÇÕES DE FRONTEND:

1. **Sanitização de Inputs**:
```javascript
const sanitizeInput = (input) => {
  return input.trim().replace(/[<>]/g, '');
};
```

2. **Validação de Email**:
```javascript
const validateEmail = (email) => {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
};
```

3. **Validação de Senha**:
- Mínimo 6 caracteres
- Confirmação obrigatória
- Feedback visual

4. **Proteção XSS**:
- Escape de caracteres especiais
- Validação de URLs
- Sanitização de dados

BOAS PRÁTICAS IMPLEMENTADAS:

- Environment variables para configs sensíveis
- Não exposição de API keys no código
- Validação client-side E server-side
- Timeout em requisições
- Error boundaries
- Loading states
- Tratamento de erros
- Logs de segurança

LIMITAÇÕES DE RATE:

- Firebase Auth rate limiting
- Firestore read/write limits
- Toast notifications para evitar spam
- Debounce em inputs

================================================================================
                            14. DEPLOY E PRODUÇÃO
================================================================================

BUILD PARA PRODUÇÃO:

1. **Preparar build**:
```bash
npm run build
```

2. **Testar build localmente**:
```bash
npm run preview
```

3. **Verificar arquivos**:
- dist/ contém todos os assets
- Arquivo index.html principal
- Assets otimizados e minificados

DEPLOY FIREBASE HOSTING:

1. **Instalar Firebase CLI**:
```bash
npm install -g firebase-tools
```

2. **Login no Firebase**:
```bash
firebase login
```

3. **Inicializar projeto**:
```bash
firebase init hosting
```

4. **Configurar firebase.json**:
```json
{
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}
```

5. **Deploy**:
```bash
firebase deploy
```

OUTRAS OPÇÕES DE DEPLOY:

**Vercel**:
- Conectar repositório GitHub
- Deploy automático
- Configurar variáveis de ambiente

**Netlify**:
- Drag & drop da pasta dist/
- Configurar redirects
- Variables de environment

**VPS/Cloud**:
- Nginx configuration
- SSL certificates
- Process managers

CONFIGURAÇÕES DE PRODUÇÃO:

1. **Variáveis de Ambiente**:
```bash
VITE_FIREBASE_API_KEY=production_key
VITE_FIREBASE_AUTH_DOMAIN=production_domain
VITE_APP_ENV=production
```

2. **Optimizações**:
- Minificação automática
- Tree shaking
- Code splitting
- Asset optimization
- Gzip compression

3. **Monitoramento**:
- Firebase Analytics
- Error tracking
- Performance monitoring
- User engagement

CHECKLIST PRÉ-DEPLOY:

✅ Todos os environment variables configurados
✅ Firebase rules testadas
✅ Build sem erros ou warnings
✅ Testes funcionais realizados
✅ Backup do banco de dados
✅ SSL certificado configurado
✅ Domínio personalizado (opcional)
✅ Analytics configurado
✅ Monitoring ativo

================================================================================
                                 CONCLUSÃO
================================================================================

O SpyMate é um projeto educacional completo que demonstra as melhores práticas
de desenvolvimento React.js moderno, integração com Firebase, e design de UX/UI
avançado. 

PRINCIPAIS DESTAQUES:

✨ Arquitetura escalável e bem estruturada
✨ Sistema de autenticação robusto
✨ Internacionalização completa (4 idiomas)
✨ Validação avançada de dados
✨ Interface moderna e responsiva
✨ Integração Firebase completa
✨ Código limpo e documentado
✨ Boas práticas de segurança

IMPORTANTE: Este projeto é apenas para fins educacionais e demonstrativos. 
Todas as funcionalidades são simuladas e não realizam ações reais de 
monitoramento ou acesso não autorizado a contas de terceiros.

================================================================================
📧 SUPORTE: Para dúvidas sobre este projeto, consulte a documentação oficial
            das tecnologias utilizadas ou entre em contato através da página
            de contato da aplicação.

📅 ÚLTIMA ATUALIZAÇÃO: Dezembro 2024
🔢 VERSÃO DA DOCUMENTAÇÃO: 1.0
================================================================================ 